set -x
#
# Don't regenerate files unless dependencies change
#
ruby tools/dependencyCheck.rb > dependencyCheck.sh
#
# Set up folder structure for the different runs
#
chmod +x dependencyCheck.sh
. ./dependencyCheck.sh
echo "GOOGLE_API_KEY=$GOOGLE_API_KEY"
echo "SKIP_PERMITS=$SKIP_PERMITS"

# Building and Safety Data

# 1. Initialize environment variable GOOGLE_API_KEY
if [ -z "$GOOGLE_API_KEY" ]; then
  . ./keys/setup.sh
fi

# 2. Create a variable name for each CSV column heading
# Permit Data
if [ -z "$SKIP_PERMITS" ]; then
    head -3 data/Building_and_Safety_Permit_Information.csv > working/Building_and_Safety_Permit_Information.3_lines
    ruby generateCSV_variable_names.rb working/Building_and_Safety_Permit_Information.3_lines > working/Building_and_Safety_Permit_Information.variable_names
else
    cp today/Building_and_Safety_Permit_Information.3_lines working/Building_and_Safety_Permit_Information.3_lines
    cp today/Building_and_Safety_Permit_Information.variable_names working/Building_and_Safety_Permit_Information.variable_names
fi

# Crime Data
if [ -z "$SKIP_CRIMES" ]; then
    head -3 data/LAPD_Crime_and_Collision_Raw_Data_for_2016.csv > working/LAPD_Crime_and_Collision_Raw_Data_for_2016.3_lines
    ruby generateCSV_variable_names.rb working/LAPD_Crime_and_Collision_Raw_Data_for_2016.3_lines > working/LAPD_Crime_and_Collision_Raw_Data_for_2016.variable_names
else
    cp today/LAPD_Crime_and_Collision_Raw_Data_for_2016.3_lines working/LAPD_Crime_and_Collision_Raw_Data_for_2016.3_lines
    cp today/LAPD_Crime_and_Collision_Raw_Data_for_2016.variable_names working/LAPD_Crime_and_Collision_Raw_Data_for_2016.variable_names
fi

# data source specific filtering, here filtering Building_and_Safety_Permit_Information.csv by zip code
head -1 data/Building_and_Safety_Permit_Information.csv > working/Building_and_Safety_Permit_Information.filtered.csv
egrep -h "90041|90042|90065" data/Building_and_Safety_Permit_Information.csv >> working/Building_and_Safety_Permit_Information.filtered.csv

# street intersections (manual step to create input file)
# Original source data: https://data.lacity.org/A-Livable-and-Sustainable-City/Street-Centerline/7j4e-nn4z
#   then export as GEOJSON
#   then manually delete everything except "Point" (i.e. keep end of file)
#   then run this to extract to lat,long,intersection streets
ruby xlatlon.rb data/street_intersections/street_intersetions.json > data/street_intersections.csv

# 3. Filter by city location (specified in "config/cities.cfg")
head -1 working/Building_and_Safety_Permit_Information.filtered.csv > working/Building_and_Safety_Permit_Information.eagle_rock.csv
ruby filterLocationByCity.rb "Eagle Rock" working/Building_and_Safety_Permit_Information.filtered.csv latitude_longitude >> working/Building_and_Safety_Permit_Information.eagle_rock.csv
head -1 data/LAPD_Crime_and_Collision_Raw_Data_for_2016.csv > working/LAPD_Crime_and_Collision_Raw_Data_for_2016.eagle_rock.csv
ruby filterLocationByCity.rb "Eagle Rock" data/LAPD_Crime_and_Collision_Raw_Data_for_2016.csv location_1 >> working/LAPD_Crime_and_Collision_Raw_Data_for_2016.eagle_rock.csv

# 4. Generate a list of MAP_MARKER Location and Text
ruby generateMarkerInfo.rb working/Building_and_Safety_Permit_Information.eagle_rock.csv latitude_longitude templates/Building_and_Safety_Permit_Information.Marker_Title.erb issue_date 1/1/2017 > working/Building_and_Safety_Permit_Information.eagle_rock.marker_info
ruby generateMarkerInfo.rb working/LAPD_Crime_and_Collision_Raw_Data_for_2016.eagle_rock.csv location_1 templates/LAPD_Crime_and_Collision_Raw_Data_for_2016.Marker_Title.erb date_occ 12/1/2016 > working/LAPD_Crime_and_Collision_Raw_Data_for_2016.eagle_rock.marker_info

#
# 5. Create Template-specific String variables, using _map_bounds, _center, _markers and
#    combine to create static HTML for Google Map display with markers.  Generate the static HTML.
ruby generateText.rb templates/Building_and_Safety_Permit_Information.erb working/Building_and_Safety_Permit_Information.eagle_rock.marker_info > results/Building_and_Safety_Permit_Information.eagle_rock.html
ruby generateText.rb templates/LAPD_Crime_and_Collision_Raw_Data_for_2016.erb working/LAPD_Crime_and_Collision_Raw_Data_for_2016.eagle_rock.marker_info > results/LAPD_Crime_and_Collision_Raw_Data_for_2016.eagle_rock.html
ruby generateText.rb templates/Building_and_Safety_Permit_Information_v2.erb working/Building_and_Safety_Permit_Information.eagle_rock.marker_info > results/Building_and_Safety_Permit_Information_v2.eagle_rock.html
ruby generateText.rb templates/LAPD_Crime_and_Collision_Raw_Data_for_2016_v2.erb working/LAPD_Crime_and_Collision_Raw_Data_for_2016.eagle_rock.marker_info > results/LAPD_Crime_and_Collision_Raw_Data_for_2016_v2.eagle_rock.html

# 6. Deploy the HTML from Step #4
# generate the index page
cp templates/eagle_rock.erb results/eagle_rock.html
cp templates/error.erb results/error.html
aws s3 cp results/eagle_rock.html s3://los-angeles-city-data
aws s3 cp results/error.html s3://los-angeles-city-data
aws s3 cp results/Building_and_Safety_Permit_Information.eagle_rock.html s3://los-angeles-city-data/eagle_rock/Building_and_Safety_Permit_Information.eagle_rock.html
aws s3 cp results/LAPD_Crime_and_Collision_Raw_Data_for_2016.eagle_rock.html s3://los-angeles-city-data/eagle_rock/LAPD_Crime_and_Collision_Raw_Data_for_2016.eagle_rock.html
aws s3 cp results/Building_and_Safety_Permit_Information_v2.eagle_rock.html s3://los-angeles-city-data/eagle_rock/Building_and_Safety_Permit_Information_v2.eagle_rock.html
aws s3 cp results/LAPD_Crime_and_Collision_Raw_Data_for_2016_v2.eagle_rock.html s3://los-angeles-city-data/eagle_rock/LAPD_Crime_and_Collision_Raw_Data_for_2016_v2.eagle_rock.html
aws s3 website s3://los-angeles-city-data/ --index-document eagle_rock.html --error-document error.html

